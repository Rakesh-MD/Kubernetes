
sudo -i
To ensure that the node does not use swap memory, run the following command:

sudo swapoff -a && sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

sudo hostnamectl set-hostname controlplane

root@ip-172-31-19-131:~# bash
root@controlplane:~#

4. Installing Docker Engine on both nodes
Doc Ref : Installing Docker
https://docs.docker.com/engine/install/ubuntu/

sudo apt-get update
sudo apt-get install ca-certificates curl -y
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y

All that remains is to start and enable the Docker service. To do this, use the following commands:

sudo systemctl start docker && sudo systemctl enable docker 

Before proceeding to the next step, verify that Docker is working as expected.

sudo systemctl status docker

docker ps


5. Configuring Cgroup Driver
For the kubelet process to work correctly, its cgroup driver needs to match the one used by Docker.

To do this, you can adjust the Docker configuration using the following command on each node:

cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
For more details, see configuring a cgroup driver Once youâ€™ve adjusted the configuration on each node, restart the Docker service and its corresponding daemon.

sudo systemctl daemon-reload && sudo systemctl restart docker


# Configure and restart containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
sudo systemctl restart containerd

Confirm the presence of the socket:
bash
Copy code
ls -l /var/run/containerd/containerd.sock



6. install kubeadm, kubelet, and kubectl on each node
Installing kubeadm, kubelet, and kubectl

https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/


These instructions are for Kubernetes v1.32.

Update the apt package index and install packages needed to use the Kubernetes apt repository:

sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl gpg


Download the public signing key for the Kubernetes package repositories. The same signing key is used for all repositories so you can disregard the version in the URL:

# If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

Add the appropriate Kubernetes apt repository. Please note that this repository have packages only for Kubernetes 1.32; for other Kubernetes minor versions, you need to change the Kubernetes minor version in the URL to match your desired minor version (you should also check that you are reading the documentation for the version of Kubernetes that you plan to install).

# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

Update the apt package index, install kubelet, kubeadm and kubectl, and pin their version:

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

The last line with the apt-mark hold command is optional, but highly recommended. This will prevent these packages from being updated until you unhold them using the command:

sudo apt-mark unhold kubelet kubeadm kubectl


7. Check the version of kubeadm, kubelet & kubectl installed
kubeadm version
kubelet --version
kubectl version

(Optional) Enable the kubelet service before running kubeadm:

sudo systemctl enable --now kubelet


8. Initializing the Control-Plane Node
Doc Ref : Creating a cluster with kubeadm
At this point, you have two nodes with kubeadm, kubelet, and kubectl installed. Now you initialize the Kubernetes control plane, which will manage the worker node and the pods running within the cluster.

Run the following command on the controlplane node to initialize your Kubernetes cluster:
kubeadm init

mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

export KUBECONFIG=/etc/kubernetes/admin.conf

kubeadm join 172.31.19.131:6443 --token ddxfi3.y56eub81uio9kvgs \
        --discovery-token-ca-cert-hash sha256:3e8c7cd34396ac21b7a70a2484fc2343fd4c00d60302487cc4637ebd34f698d6

root@controlplane:~# kubectl get nodes
NAME           STATUS     ROLES           AGE    VERSION
controlplane   NotReady   control-plane   12m    v1.32.0
worker1        NotReady   <none>          6m3s   v1.32.0
root@controlplane:~#









